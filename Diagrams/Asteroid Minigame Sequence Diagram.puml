@startuml
'https://plantuml.com/sequence-diagram


box "Clients"
actor "ColonyOwner"
actor "Guest1"
box

box "Backend"
participant "Main backend"
participant "Main DB"
participant "Multiplayer Backend"
participant "● (Pub-Sub)" as pubsub
box

'Flow'

'Players Join Gamelobby'
ColonyOwner -> "Multiplayer Backend" : EnterLocationEvent.
"Multiplayer Backend" -> "Guest1" : EnterLocationEvent.
"ColonyOwner" -> "Main backend" : Fetch difficulties.

"Multiplayer Backend" <-> "Main DB" : Game data is fetched.
"Multiplayer Backend" -> "Multiplayer Backend" : Game is set up and initialized.

"Multiplayer Backend" -> "ColonyOwner" : Data is distributed.
"Multiplayer Backend" -> "Guest1" : Data is distributed.
"Multiplayer Backend" -> pubsub : Game-start is announced.
pubsub -> "ColonyOwner" : Initial update.
pubsub -> "Guest1" : Initial update.

'Main Game Flow'
note right of "ColonyOwner"
  Game logic will update as needed during this loop. This flow focuses on the multiplayer interaction among
  players.
end note
loop Game Loop
    alt if (Event Occurs)
        note right of "ColonyOwner"
          Events can be multiple things, in the case of the asteroids mini-game, such an event could be when any
          player shoots an asteroid or ally. The game runs independently at a given framerate for clients, while
          multiplayer events are published by the executing client and received and updated by all subscribing
          clients.
          (What if two clients publish the same event before subscribers are updated? Pub-Sub server check to see
          if event already exists and then update all clients, including publisher?).
        end note

        "ColonyOwner" -> pubsub : Any event occurs **(ColonyOwner)**.
        "Guest1" <- pubsub : Other players receive an update **(ColonyOwner)**.
        "Guest1" -> pubsub : Any event occurs **(Guest1)**.
        "ColonyOwner" <- pubsub : Other players receive an update **(Guest1)**.
    end
end

'Game Over'
"Multiplayer Backend" -> "Multiplayer Backend" : "Game Over" conditions are \nmet, the game ends.
"Multiplayer Backend" -> pubsub : Publishes "Game Over" event.
pubsub -> "ColonyOwner" : **ColonyOwner** disconnects.
pubsub -> "Guest1" : **Guest1** disconnects.






@enduml